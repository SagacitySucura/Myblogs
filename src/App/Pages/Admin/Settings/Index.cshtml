@page
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Settings - General";
}
<div class="bf-main">
    <partial name="~/Pages/Admin/Shared/_Taskbar.cshtml" />
    <div id="app" style="display: none" class="bf-body">
        <form>
            <div class="bf-content bf-content-boxed bf-settings">

                <div class="form-group">
                    <label class="form-group-label">@Localizer["title"]</label>
                    <input v-model.trim="$v.blog.title.$model" :class="['form-control', status($v.blog.title)]" type="text" />
                    <label v-if="!$v.blog.title.required" class="val-error">Required</label>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["description"]</label>
                    <textarea v-model.trim="$v.blog.description.$model" :class="['form-control', status($v.blog.description)]" type="text"></textarea>
                    <label v-if="!$v.blog.description.required" class="val-error">Required</label>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["items-per-page"]</label>
                    <input v-model.trim="$v.blog.itemsPerPage.$model" :class="['form-control', status($v.blog.itemsPerPage)]" type="text" />
                    <label v-if="!$v.blog.itemsPerPage.required" class="val-error">Required</label>
                    <label v-if="!$v.blog.itemsPerPage.integer" class="val-error">Should be numeric</label>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["logo"]</label>
                    <div class="input-group">
                        <input v-model="blog.logo" type="text" id="txtLogo" name="txtLogo" class="form-control" readonly />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-secondary btn-upload" onclick="return fileManagerController.open(updateAppLogoCallback);"> @Localizer["select"]</button>
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["cover"]</label>
                    <div class="input-group">
                        <input v-model="blog.cover" type="text" id="txtCover" name="txtCover" class="form-control" readonly />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-secondary btn-upload" onclick="return fileManagerController.open(updateAppCoverCallback);"> @Localizer["select"]</button>
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["language"]</label>
                    <select class="form-control" v-model="blog.culture">
                        <option v-for="option in cultures" v-bind:value="option.value">
                            {{ option.text }}
                        </option>
                    </select>
                </div>
                <button type="button" :disabled="$v.blog.$invalid" v-on:click="save($v)" class="btn btn-primary btn-main">@Localizer["save"]</button>

            </div>
        </form>
    </div>
</div>
<partial name="~/Pages/Admin/Shared/_FileMgr.cshtml" />

@section Scripts{
    <script src="~/admin/js/app/fileManagerController.js"></script>
    <script>
        Vue.use(window.vuelidate.default)
        const { required, integer } = window.validators

        const app = new Vue({
            el: '#app',
            data: {
                blog: {},
                cultures: {}
            },
            validations: {
                blog: {
                    title: { required },
                    description: { required },
                    itemsPerPage: { required, integer }
                }
            },
            methods: {
                load: function () {
                    axios.get(webRoot + 'api/settings')
                        .then(response => {
                            this.blog = response.data;
                            $('#app').css('display', '');
                            this.loadCultures();
                        })
                        .catch(function (error) { toastr.error(error); });
                },
                loadCultures: function () {
                    axios.get(webRoot + 'api/settings/cultures')
                        .then(response => { this.cultures = response.data })
                        .catch(function (error) { toastr.error(error); });
                },
                status(v) {
                    return {
                        error: v.$error,
                        dirty: v.$dirty
                    }
                },
                save: function (v) {
                    if (v.blog.$invalid) {
                        toastr.error('Invalid');
                    }
                    else {
                        axios.post(webRoot + 'api/settings', this.blog)
                            .then(function (response) {
                                toastr.success('Updated');
                            })
                            .catch(function (error) {
                                toastr.error(error);
                            });
                    }
                }
            },
            beforeMount() {
                this.load()
            }
        })
    </script>
}