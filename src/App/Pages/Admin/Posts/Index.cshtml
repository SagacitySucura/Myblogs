@page
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["posts"];
    var user = User.Identity.Name;
}
<div id="app" class="bf-main" style="display:none">
    <div class="bf-sidebar d-lg-block">
        <div class="bf-posts-form-search">
            <input id="txtSearch" name="txtSearch" v-on:keyup.13="search" class="form-control form-control-sm form-control-rounded" placeholder="@Localizer["search"]...">
        </div>
        <form id="frmPostFilter" class="bf-posts-filters">
            <div class="filter-group">
                <div class="filter-group-title"><span>@Localizer["status"]</span> <i class="fa fa-chevron-down d-block d-lg-none"></i></div>
                <ul class="filter-group-list">
                    <li>
                        <label class="custom-control custom-radio filters-label">
                            <input class="custom-control-input" type="radio" name="status-filter" id="status-filter" value="A" v-model="status" v-on:click="filter('A')">
                            <span class="custom-control-label">@Localizer["all"]</span>
                        </label>
                        <label class="custom-control custom-radio filters-label">
                            <input class="custom-control-input" type="radio" name="status-filter" id="status-filter" value="P" v-model="status" v-on:click="filter('P')">
                            <span class="custom-control-label">@Localizer["published"]</span>
                        </label>
                        <label class="custom-control custom-radio filters-label">
                            <input class="custom-control-input" type="radio" name="status-filter" id="status-filter" value="D" v-model="status" v-on:click="filter('D')">
                            <span class="custom-control-label">@Localizer["draft"]</span>
                        </label>
                    </li>
                </ul>
            </div>
         </form>
    </div>
    <div class="bf-body">
        <!-- Grid -->
        <div class="bf-posts-grid d-flex" aria-label="posts">
            <div v-for="post in pageList.posts" :key="post.id" class="post-grid-col">
                <div class="post-grid-item">
                    <a class="item-link" :href="'posts/edit?id=' + post.id" v-bind:style="{ backgroundImage: 'url(' + webRoot + post.cover + ')' }">
                        <div class="item-title mt-auto">{{post.title}}</div>
                    </a>
                    <div class="item-info d-flex align-items-center">
                        <span class="item-date mr-auto">{{toDate(post.published)}}</span>

                        <a v-if="post.isPublished" href="#" v-on:click="return publish(post.id, 'U')" class="item-show">
                            <span class="item-status item-status-published ml-auto" data-tooltip title="@Localizer["published"]"><i class="fas fa-circle"></i></span>
                        </a>
                        <a v-if="post.isPublished === false" href="#" v-on:click="return publish(post.id, 'P')" class="item-show ml-5">
                            <span class="item-status item-status-draft ml-auto" data-tooltip title="@Localizer["draft"]"><i class="fas fa-circle"></i></span>
                        </a>

                        <button v-if="isAdmin && post.featured" class="btn-unstyled item-favorite ml-3" data-tooltip="" title="" v-on:click="return feature(post.id, 'U')" data-original-title="@Localizer["featured"]">
                            <i class="fas fa-star"></i>
                        </button>
                        <button v-if="isAdmin && !post.featured" class="btn-unstyled item-favorite ml-3" data-tooltip="" title="" v-on:click="return feature(post.id, 'F')" data-original-title="@Localizer["add-to-featured"]">
                            <i class="far fa-star"></i>
                        </button>

                        <a class="item-show ml-3" :href="webRoot + 'posts/' + post.slug" target="_blank" data-tooltip="" title="" data-original-title="@Localizer["view"]"><i class="fas fa-external-link-square-alt"></i></a>
                        <a class="item-show ml-4" href="#" v-on:click="return remove(post.id)" data-tooltip="" title="" data-original-title="@Localizer["delete"]"><i class="fas fa-trash" style="color: #ff6666"></i></a>
                    </div>
                </div>
            </div>
        </div>
        <!--/Grid -->

        <!-- Empty -->
        <div v-if="pageList.posts && pageList.posts.length === 0" class="bf-list-empty">
            @Localizer["not-found"]!
        </div>
        <!--/Empty -->

        <!-- Pagination -->
        <ul v-if="pageList.posts && pageList.posts.length > 0" class="bf-pagination d-flex">
            <li v-if="pageList.pager.showOlder" class="bf-pagination-item">
                <a class="bf-pagination-link" title="older" :href="pagelink('older')">
                    <i class="bf-pagination-icon fa fa-chevron-left"></i>
                </a>
            </li>
            <li v-if="pageList.pager.showNewer" class="bf-pagination-item">
                <a class="bf-pagination-link" title="newer" :href="pagelink('newer')">
                    <i class="bf-pagination-icon fa fa-chevron-right"></i>
                </a>
            </li>
            <li class="bf-pagination-item">
                <span class="bf-pagination-count">
                    {{ cntFrom }}-{{ cntTo }} out of {{ pageList.pager.total }}
                </span>
            </li>
        </ul>
        <!--/Pagination -->
    </div>
</div>

@section Scripts{
    <script>
        var vm = new Vue({
        el: "#app",
        data: {
            isAdmin: isAdmin(),
            status: "A",
            page: 1,
            cntFrom: 0,
            cntTo: 0,
            pageList: {}
        },
        methods: {
            load: function () {
                var term = fromQueryString('term');
                var url = term ? getUrl('api/posts/search/' + term + '?author=@user&page=' + this.page) : getUrl('api/posts?author=@user&page=' + this.page);
                if(this.status == "D") { url += '&include=d'; }
                if(this.status == "P"){ url += '&include=fp'; }

                axios.get(url)
                    .then(response => {
                        this.pageList = response.data;
                        if(this.pageList && this.pageList.pager){
                            var pgr = this.pageList.pager;
                            this.cntFrom = pgr.currentPage == 1 ? 1 : (pgr.currentPage - 1) * pgr.itemsPerPage + 1;
                            this.cntTo = pgr.currentPage * pgr.itemsPerPage < pgr.total ? pgr.currentPage * pgr.itemsPerPage : pgr.total;
                        }                       
                        $('#app').fadeIn();
                    })
                    .catch(function (error) { toastr.error(error); });
            },
            publish: function(id, flag){
                axios.put(webRoot + 'api/posts/publish?flag=' + flag + '&id=' + id)
                    .then(function (response) {
                        toastr.success(response.data);
                        setTimeout(function(){ location.reload(); }, 1000);
                    })
                    .catch(function (error) {
                        toastr.error(error);
                    });
            },
            feature: function(id, flag){
                axios.put(webRoot + 'api/posts/feature?flag=' + flag + '&id=' + id)
                    .then(function (response) {
                        toastr.success(response.data);
                        setTimeout(function(){ location.reload(); }, 1000);
                    })
                    .catch(function (error) {
                        toastr.error(error);
                    });
            },
            search: function(){
                var term = $('#txtSearch').val();
                $('.bf-posts-form-search').submit();
                if(!term)
                    return false;

                var url = getUrl('admin/posts?author=@user&term=' + term + '&page=' + this.page);
                if (this.status !== 'A') {
                    url += '&status=' + this.status;
                }
                window.location.href = url;
            },
            filter: function (status) {
                window.location.href = getUrl('admin/posts?author=@user&status=' + status);
            },
            toDate: function(dt){
                return dt.startsWith('0001-01-01') || dt.startsWith('01-01-01') ? 'DRAFT' : getDate(dt);
            },
            remove: function(id){
                var result = confirm("Please confirm removing this post");
                if (result) {
                    axios.delete(webRoot + 'api/posts/remove/' + id)
                    .then(response => {
                        toastr.success(response.data);
                        setTimeout(function(){ location.reload(); }, 1000);
                    })
                    .catch(function (error) { toastr.error(error); });
                }
                return false;
            },
            pagelink: function (direction) {
                var link = 'posts?author=@user&page=';
                if (direction === 'older') {
                    link += this.pageList.pager.older;
                }
                else {
                    link += this.pageList.pager.newer;
                }
                if (this.status !== 'A') {
                    link += '&status=' + this.status;
                }
                return link;
            }
        },
        beforeMount() {
            if(fromQueryString('page')){ this.page = fromQueryString('page'); }
            if(fromQueryString('status')){ this.status = fromQueryString('status'); }
            this.load();
        }
    })
    </script>
}